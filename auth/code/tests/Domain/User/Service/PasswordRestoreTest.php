<?php

declare(strict_types=1);

namespace App\Tests\Domain\User\Service;

use App\Domain\User\Service\PasswordRestore;
use App\Domain\User\Service\UserFinder;
use App\Domain\User\Service\UserStore;
use App\Infrastructure\Repository\InMemory\InMemoryUserRepository;
use Ramsey\Uuid\Uuid;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class PasswordRestoreTest extends WebTestCase
{
    private InMemoryUserRepository $userRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userRepository = new InMemoryUserRepository();
    }

    public function testRestoreUserPasswordByEmailContact(): void
    {
        $id = Uuid::uuid4();
        $this->userRepository->createUser(
            $id,
            'test@gmail.com',
            'test-password',
            '+380938982443',
            'Dikiy Roman'
        );

        $newPassword = 'new-password-email';
        $userFinder = new UserFinder($this->userRepository);
        $userStore = new UserStore($this->userRepository);

        $restoreService = new PasswordRestore($userFinder, $userStore, $this->mockEncoder($newPassword));
        $restoreService->restore('test@gmail.com', $newPassword);
        $userWithNewPassword = $userFinder->findActiveUserById($id->toString());

        $this->assertSame($userWithNewPassword->getPassword(), $newPassword);
    }

    public function testRestoreUserPasswordByPhoneContact(): void
    {
        $id = Uuid::uuid4();
        $this->userRepository->createUser(
            $id,
            'test@gmail.com',
            'test-password',
            '+380938982443',
            'Dikiy Roman'
        );

        $newPassword = 'new-password-phone';
        $userFinder = new UserFinder($this->userRepository);
        $userStore = new UserStore($this->userRepository);

        $restoreService = new PasswordRestore($userFinder, $userStore, $this->mockEncoder($newPassword));
        $restoreService->restore('+380938982443', $newPassword);
        $userWithNewPassword = $userFinder->findActiveUserById($id->toString());

        $this->assertSame($userWithNewPassword->getPassword(), $newPassword);
    }

    private function mockEncoder(string $password)
    {
        $mock = $this->createMock(UserPasswordEncoderInterface::class);
        $mock->expects(self::once())->method('encodePassword')->willReturn($password);

        return $mock;
    }
}
